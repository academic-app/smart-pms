{"version":3,"sources":["App.js","serviceWorker.js","index.js","images/boards.svg"],"names":["App","services","displayServices","chars","split","i","string","displayString","interval","setInterval","length","clearInterval","render","className","id","src","boards","alt","Button","type","variant","this","$","html","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"gXA8DeA,E,4MApDXC,SAAY,8J,EASZC,gBAAkB,WACd,IAAMC,EAAQ,EAAKF,SAASG,MAAM,IAC9BC,EAAI,EACJC,EAAS,mCACb,EAAKC,cAAcD,GACnB,IAAME,EAAWC,aAAY,WACtBJ,EAAI,EAAKJ,SAASS,QACjBJ,GAAkBH,EAAME,GACxB,EAAKE,cAAcD,GACH,MAAbH,EAAME,IAAcA,EAAI,EAAKJ,SAASS,OAAO,IAC5CJ,GAAkB,6CAClB,EAAKC,cAAcD,IAEvBD,MAEAC,GAAkB,gJAClB,EAAKC,cAAcD,GACnBK,cAAcH,MAEpB,M,EAONI,OAAS,WACL,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,wBAAIC,GAAI,cAAR,yBACA,yBAAKC,IAAKC,IAAQH,UAAW,WAAYI,IAAI,SAC7C,kBAACC,EAAA,EAAD,CAAQJ,GAAI,WAAYK,KAAM,SAAUC,QAAS,OAAQP,UAAW,aAApE,SAAuF,uBAAGA,UAAW,mBACrG,kBAACK,EAAA,EAAD,CAAQJ,GAAI,cAAeK,KAAM,SAAUC,QAAS,OAAQP,UAAW,aAAvE,YAA6F,uBAAGA,UAAW,mBAC3G,0BAAMC,GAAI,cAAV,SACA,0BAAMA,GAAI,iBAAV,aAEJ,uBAAGA,GAAI,qB,kEAxCfO,KAAKnB,oB,oCAyBKI,GACVgB,IAAE,mBAAmBC,KAAKjB,EAAO,qC,GAlCvBkB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.d8655e95.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport boards from './images/boards.svg';\nimport './App.css';\nimport $ from 'jquery';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button} from 'react-bootstrap';\n\nclass App extends Component{\n\n    services =  \"Will Be on your service soon.\" +\n                \"Smart Management of tasks you care.\" +\n                \"Get your activities in track.\" +\n                \"Automation on your ease.\" +\n                \"Analytical Reports for better control.\" ;\n    componentDidMount() {\n        this.displayServices();\n    }\n\n    displayServices = () => {\n        const chars = this.services.split('');\n        let i = 0;\n        let string = \"<i class=\\\"fa fa-hand-o-right\\\"/> \";\n        this.displayString(string);\n        const interval = setInterval(()=>{\n            if(i < this.services.length) {\n                string = string + chars[i];\n                this.displayString(string);\n                if(chars[i] === '.' && i < this.services.length-1){\n                    string = string + \"<br/><br/><i class=\\\"fa fa-hand-o-right\\\"/> \";\n                    this.displayString(string);\n                }\n                i++;\n            } else {\n                string = string + \"<br/><br/><i class=\\\"fa fa-hand-o-right\\\"/> <span class='btn btn-link'>Login</span> or <span class='btn btn-link'>Register</span> to begin.. \";\n                this.displayString(string);\n                clearInterval(interval);\n            }\n        },100);\n    }\n\n    displayString(string) {\n        $('#serviceDisplay').html(string+\"<b id='display-cursor'> _</b>\");\n    }\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1 id={\"app-header\"}>SMART TASK MANAGEMENT</h1>\n                    <img src={boards} className={\"App-logo\"} alt=\"logo\" />\n                    <Button id={\"logInBtn\"} type={\"button\"} variant={\"dark\"} className={\"mr-2 sm-2\"}>Login <i className={\"fa fa-sign-in\"}/></Button>\n                    <Button id={\"registerBtn\"} type={\"button\"} variant={\"dark\"} className={\"mr-2 sm-2\"}>Register <i className={\"fa fa-id-card\"}/></Button>\n                    <span id={\"l-logInBtn\"}>login</span>\n                    <span id={\"l-registerBtn\"}>register</span>\n                </header>\n                <p id={\"serviceDisplay\"}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/boards.e1a1bef5.svg\";"],"sourceRoot":""}
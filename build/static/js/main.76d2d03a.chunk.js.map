{"version":3,"sources":["images/boards.svg","components/Login/login-form.svg","components/ServiceBroadCaster/ServiceBroadCaster.module.css","components/Login/LoginForm.js","components/arrayShuffle/arrayShuffle.js","components/ServiceBroadCaster/ServiceBroadCaster.js","base.js","App.js","serviceWorker.js","index.js","components/Login/LoginForm.module.css"],"names":["module","exports","LoginForm","state","user","password","loginInfoChanged","event","item","target","name","setState","value","onLoginCancelled","props","className","classes","Form","onSubmit","preventDefault","onLogin","src","loginForm","Layout","alt","type","placeholder","onChange","this","login","sso","onClick","onLoginWithGoogle","style","backgroundColor","padding","borderRadius","cancel","Component","shuffle","array","counter","length","index","Math","floor","random","temp","ServiceBroadCaster","servicesToDisplay","displayServices","chars","arrayShuffle","services","join","split","i","string","Fragment","updateServices","interval","setInterval","concatElement","handleLogin","handleRegister","clearInterval","el1","el2","el","id","render","serviceBroadcastArea","app","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","rebase","createClass","database","GoogleAuthProvider","App","showLoginForm","cancelLogin","alert","boards","Button","variant","loginInfo","auth","fetchSignInMethodsForEmail","then","providers","indexOf","signInWithEmailAndPassword","response","console","log","catch","error","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.76d2d03a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boards.e1a1bef5.svg\";","module.exports = __webpack_public_path__ + \"static/media/login-form.7b97f5e3.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"serviceBroadcastArea\":\"ServiceBroadCaster_serviceBroadcastArea__1qM-S\"};","import React, {Component} from \"react\";\nimport loginForm from \"./login-form.svg\";\nimport classes from \"./LoginForm.module.css\"\n\nclass LoginForm extends Component {\n\n    state = {\n        user: \"\",\n        password: \"\"\n    }\n\n    loginInfoChanged = (event) => {\n        const item = event.target.name;\n        this.setState({\n            ...this.state,\n            [item]: event.target.value\n        })\n    }\n\n    onLoginCancelled = () => {\n        this.setState({\n            ...this.state,\n            user: \"\",\n            password: \"\"\n        });\n        this.props.onLoginCancelled();\n    }\n\n    render() {\n        return (\n            <form className={classes.Form} onSubmit={(event) => {\n                event.preventDefault();\n                this.props.onLogin({user: this.state.user, password: this.state.password})\n            }}>\n                <img src={loginForm} className={classes.Layout}  alt={\"login-form-layout\"} />\n                <input type={\"text\"} name={\"user\"} className={classes.user} placeholder={\"Username or Email\"} onChange={this.loginInfoChanged} value={this.state.user}/>\n                <input type={\"password\"} name={\"password\"} className={classes.password} placeholder={\"Password\"} onChange={this.loginInfoChanged} value={this.state.password}/>\n                <button type={\"submit\"} className={classes.login}>LOGIN</button>\n                <button type={\"button\"} className={classes.sso} onClick={this.props.onLoginWithGoogle}><i style={{\n                    \"color\":\"#4285f4\",\n                    backgroundColor: \"white\",\n                    padding: \"5px\",\n                    borderRadius: \"15px\"\n                }} className={\"fa fa-google\"}/>&nbsp;&nbsp;Login with Google</button>\n                <span className={\"btn btn-link \"+classes.cancel} onClick={this.onLoginCancelled}>Cancel</span>\n            </form>\n        )\n    }\n}\n\nexport default LoginForm;","export default function shuffle(array) {\n    let counter = array.length;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        let index = Math.floor(Math.random() * counter);\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element with it\n        let temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n    }\n    return array;\n}","import React, {Component} from \"react\";\nimport arrayShuffle from \"../arrayShuffle/arrayShuffle\";\nimport classes from \"./ServiceBroadCaster.module.css\";\n\nclass ServiceBroadCaster extends Component {\n\n    state = {\n        servicesToDisplay: null\n    }\n\n    componentDidMount() {\n        this.displayServices();\n    }\n\n    displayServices = () => {\n        const chars = arrayShuffle(this.props.services).join('').split('');\n        let i = 0;\n        let string = <React.Fragment><i className={\"fa fa-hand-o-right\"}/> </React.Fragment>;\n        this.updateServices(string);\n        const interval = setInterval(()=>{\n            if(i < chars.length) {\n                string = this.concatElement(string, chars[i]);\n                this.updateServices(string);\n                if(chars[i] === '.' && i < chars.length-1){\n                    string = this.concatElement(string, <br/>);\n                    string = this.concatElement(string, <React.Fragment><i className={\"fa fa-hand-o-right\"}/> </React.Fragment>);\n                    this.updateServices(string);\n                }\n                i++;\n            } else {\n                string = this.concatElement(string, <br/>);\n                string = this.concatElement(string, <React.Fragment><i className={\"fa fa-hand-o-right\"}/> </React.Fragment>);\n                string = this.concatElement(string, <React.Fragment><span className={'btn btn-link'} onClick={this.props.handleLogin}>Login</span> or <span className={'btn btn-link'} onClick={this.props.handleRegister}>Register</span> to begin..</React.Fragment>);\n                this.updateServices(string);\n                clearInterval(interval);\n            }\n        },100);\n    }\n\n    concatElement = (el1, el2)=>{\n        return <React.Fragment>{el1}{el2}</React.Fragment>\n    }\n\n    updateServices = (el) => {\n        this.setState({\n            servicesToDisplay : <React.Fragment>{el} <b id={'display-cursor'}> _</b></React.Fragment>\n        })\n    }\n\n    render = () => {\n        return (\n            <p className={classes.serviceBroadcastArea}>\n                {this.state.servicesToDisplay}\n            </p>\n        );\n    }\n}\n\nexport default ServiceBroadCaster;","// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport * as firebase from \"firebase/app\";\nimport rebase from \"re-base\";\n\n// Add the Firebase services that you want to use\nimport \"firebase/auth\";\nimport \"firebase/analytics\";\nimport \"firebase/database\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDQSL_YD4ndOnhBDm-UWao9XkkAnXVG7Ww\",\n    authDomain: \"smart-pms-1797e.firebaseapp.com\",\n    databaseURL: \"https://smart-pms-1797e.firebaseio.com\",\n    projectId: \"smart-pms-1797e\",\n    storageBucket: \"smart-pms-1797e.appspot.com\",\n    messagingSenderId: \"97961959988\",\n    appId: \"1:97961959988:web:6d87fd4bcc221bf50f2061\",\n    measurementId: \"G-2KTZ0JQCHX\"\n};\n// Initialize Firebase\nconst app = firebase.initializeApp(firebaseConfig);\nconst base = rebase.createClass(app.database());\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\nfirebase.analytics();\nexport {app, base, googleAuthProvider};","import React, {Component} from 'react';\nimport './App.css';\nimport boards from './images/boards.svg';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button} from 'react-bootstrap';\nimport LoginForm from \"./components/Login/LoginForm\";\nimport ServiceBroadCaster from \"./components/ServiceBroadCaster/ServiceBroadCaster\";\nimport {app} from \"./base\";\n\nclass App extends Component{\n\n    state = {\n        showLoginForm: false\n    }\n\n    handleLogin = () => {\n        this.setState({\n            ...this.state,\n            showLoginForm: !this.state.showLoginForm\n        });\n    }\n\n    cancelLogin = () => {\n        this.setState({\n            ...this.state,\n            showLoginForm: false\n        });\n    }\n\n    handleRegister = () => {\n        alert(\"to register\");\n    }\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1 id={\"app-header\"}>SMART TASK MANAGEMENT</h1>\n                    <img src={boards} className={\"App-logo\"} alt=\"logo\" />\n                    {/*for web browsers*/}\n                    <span id={\"l-logInBtn\"} onClick={this.handleLogin}>login</span>\n                    <span id={\"l-registerBtn\"} onClick={this.handleRegister}>register</span>\n                    {/*for mobile devices*/}\n                    <Button id={\"logInBtn\"} type={\"button\"} variant={\"dark\"} className={\"mr-2 sm-2\"} onClick={this.handleLogin}>Login <i className={\"fa fa-sign-in\"}/></Button>\n                    <Button id={\"registerBtn\"} type={\"button\"} variant={\"dark\"} className={\"mr-2 sm-2\"} onClick={this.handleRegister}>Register <i className={\"fa fa-id-card\"}/></Button>\n                </header>\n                {\n                    this.state.showLoginForm && (\n                        <LoginForm\n                            onLoginCancelled={this.cancelLogin}\n                            onLogin={this.onLogin}\n                            onLoginWithGoogle={this.onLoginWithGoogle} />\n                    )\n                }\n                <ServiceBroadCaster services={[\n                                        \"Smart Management of tasks you care.\",\n                                        \"Get your activities in track.\",\n                                        \"Automation on your ease.\",\n                                        \"Analytical Reports for better control.\"\n                                    ]}\n                                    handleLogin={this.handleLogin}\n                                    handleRegister={this.handleRegister} />\n            </div>\n        );\n    }\n\n    onLogin = (loginInfo) => {\n        app.auth().fetchSignInMethodsForEmail(loginInfo.user).then((providers) => {\n            if(providers.length === 0){\n                // return app.auth().createUserWithEmailAndPassword(loginInfo.user, this.state.password);\n                return false;\n            }else if(providers.indexOf(\"password\") === -1){\n                return null;\n                // used other sign in method\n            }else{\n                return app.auth().signInWithEmailAndPassword(loginInfo.user, loginInfo.password);\n            }\n        }).then(response=>{\n            if(response === null){\n                alert(\"user other method for login\");\n            }else if (response === false){\n                alert(\"username or password not valid\");\n            }else if ('user' in response){\n                alert(\"You are now logged In\");\n                console.log(response);\n                // this.setState({\n                //     ...this.state,\n                //     authenticated: true\n                // })\n            }\n        }).catch(error=>console.log(error));\n    }\n\n    onLoginWithGoogle = () => {\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"LoginForm_Form__15aET\",\"Layout\":\"LoginForm_Layout__19Ox9\",\"user\":\"LoginForm_user__3O1up\",\"password\":\"LoginForm_password__MIeY2\",\"login\":\"LoginForm_login__3mq6k\",\"sso\":\"LoginForm_sso__1xEcx\",\"cancel\":\"LoginForm_cancel__3d66x\"};"],"sourceRoot":""}